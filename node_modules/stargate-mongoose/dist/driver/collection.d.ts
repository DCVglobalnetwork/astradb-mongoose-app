import { default as MongooseCollection } from 'mongoose/lib/collection';
import { DeleteOneOptions, FindOneAndDeleteOptions, FindOneAndReplaceOptions, FindOneAndUpdateOptions, FindOneOptions, FindOptions, InsertManyOptions, UpdateManyOptions, UpdateOneOptions } from '../collections/options';
import { JSONAPIDeleteResult } from '../collections/collection';
type NodeCallback<ResultType = any> = (err: Error | null, res: ResultType | null) => unknown;
/**
 * Collection operations supported by the driver.
 */
export declare class Collection extends MongooseCollection {
    debugType: string;
    constructor(name: string, conn: any, options: any);
    get collection(): any;
    /**
    * Count documents in the collection that match the given filter. Use countDocuments() instead.
    * @param filter
    * @deprecated
    */
    count(filter: Record<string, any>): any;
    /**
     * Count documents in the collection that match the given filter.
     * @param filter
     */
    countDocuments(filter: Record<string, any>): any;
    /**
     * Find documents in the collection that match the given filter.
     * @param filter
     * @param options
     * @param callback
     */
    find(filter: Record<string, any>, options?: FindOptions, callback?: NodeCallback<Record<string, any>[]>): any;
    /**
     * Find a single document in the collection that matches the given filter.
     * @param filter
     * @param options
     */
    findOne(filter: Record<string, any>, options?: FindOneOptions): any;
    /**
     * Insert a single document into the collection.
     * @param doc
     */
    insertOne(doc: Record<string, any>): any;
    /**
     * Insert multiple documents into the collection.
     * @param documents
     * @param options
     */
    insertMany(documents: Record<string, any>[], options?: InsertManyOptions): any;
    /**
     * Update a single document in a collection.
     * @param filter
     * @param update
     * @param options
     */
    findOneAndUpdate(filter: Record<string, any>, update: Record<string, any>, options?: FindOneAndUpdateOptions): any;
    /**
     * Find a single document in the collection and delete it.
     * @param filter
     * @param options
     */
    findOneAndDelete(filter: Record<string, any>, options?: FindOneAndDeleteOptions): any;
    /**
     * Find a single document in the collection and replace it.
     * @param filter
     * @param newDoc
     * @param options
     */
    findOneAndReplace(filter: Record<string, any>, newDoc: Record<string, any>, options?: FindOneAndReplaceOptions): any;
    /**
     * Delete one or more documents in a collection that match the given filter.
     * @param filter
     */
    deleteMany(filter: Record<string, any>): any;
    /**
     * Delete a single document in a collection that matches the given filter.
     * @param filter
     * @param options
     * @param callback
     */
    deleteOne(filter: Record<string, any>, options?: DeleteOneOptions, callback?: NodeCallback<JSONAPIDeleteResult>): any;
    /**
     * Update a single document in a collection that matches the given filter.
     * @param filter
     * @param update
     * @param options
     */
    updateOne(filter: Record<string, any>, update: Record<string, any>, options?: UpdateOneOptions): any;
    /**
     * Update multiple documents in a collection that match the given filter.
     * @param filter
     * @param update
     * @param options
     */
    updateMany(filter: Record<string, any>, update: Record<string, any>, options?: UpdateManyOptions): any;
    /**
     * Bulk write not supported.
     * @param ops
     * @param options
     */
    bulkWrite(ops: any[], options?: any): void;
    /**
     * Aggregate not supported.
     * @param pipeline
     * @param options
     */
    aggregate(pipeline: any[], options?: any): void;
    /**
     * Bulk Save not supported.
     * @param docs
     * @param options
     */
    bulkSave(docs: any[], options?: any): void;
    /**
     * Clean indexes not supported.
     * @param options
     */
    cleanIndexes(options?: any): void;
    /**
     * List indexes not supported.
     * @param options
     */
    listIndexes(options?: any): void;
    /**
     * Create index not supported.
     * @param fieldOrSpec
     * @param options
     */
    createIndex(fieldOrSpec: any, options?: any): void;
    /**
     * Drop indexes not supported.
     */
    dropIndexes(): void;
    /**
     * Watch operation not supported.
     */
    watch(): void;
    /**
     * Distinct operation not supported.
     */
    distinct(): void;
    /**
     * Estimated document count operation not supported.
     */
    estimatedDocumentCount(): void;
    /**
     * Replace one operation not supported.
     */
    replaceOne(): void;
    /**
     * Sync indexes operation not supported.
     */
    syncIndexes(): void;
}
export declare class OperationNotSupportedError extends Error {
    constructor(message: string);
}
export {};
